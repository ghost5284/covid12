{
	"name": "df_transform_hospital_admissions",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admissions",
						"type": "DatasetReference"
					},
					"name": "sourceHospiatals"
				},
				{
					"dataset": {
						"referenceName": "ds_contry_lookup",
						"type": "DatasetReference"
					},
					"name": "countrySource"
				},
				{
					"dataset": {
						"referenceName": "ds_dim_date_lookup",
						"type": "DatasetReference"
					},
					"name": "sourceDimDate"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "ds_hospital_admission_weekly",
						"type": "DatasetReference"
					},
					"name": "weeklySink"
				},
				{
					"dataset": {
						"referenceName": "ds_hospiatl_admissions_daily",
						"type": "DatasetReference"
					},
					"name": "DailySink"
				}
			],
			"transformations": [
				{
					"name": "selectRows"
				},
				{
					"name": "lookuphospitaladmissions"
				},
				{
					"name": "selectRequiredColumns"
				},
				{
					"name": "splitDailyToWeekly"
				},
				{
					"name": "DerivedecdcWeekYear"
				},
				{
					"name": "aggregateDimDate"
				},
				{
					"name": "joinWithDate"
				},
				{
					"name": "pivotWeekly"
				},
				{
					"name": "pivotDaily"
				},
				{
					"name": "sortWeekly"
				},
				{
					"name": "sortDaily"
				},
				{
					"name": "selectWeekly"
				},
				{
					"name": "selectDaily"
				}
			],
			"scriptLines": [
				"source(output(",
				"          country as string,",
				"          indicator as string,",
				"          date as date,",
				"          year_week as string,",
				"          value as double,",
				"          source as string,",
				"          url as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceHospiatals",
				"source(output(",
				"          country as string,",
				"          country_code_2_digit as string,",
				"          country_code_3_digit as string,",
				"          continent as string,",
				"          population as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> countrySource",
				"source(output(",
				"          date_key as string,",
				"          date as string,",
				"          year as string,",
				"          month as string,",
				"          day as string,",
				"          day_name as string,",
				"          day_of_year as string,",
				"          week_of_month as string,",
				"          week_of_year as string,",
				"          month_name as string,",
				"          year_month as string,",
				"          year_week as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> sourceDimDate",
				"sourceHospiatals select(mapColumn(",
				"          country,",
				"          indicator,",
				"          reported_date = date,",
				"          reported_year_week = year_week,",
				"          value,",
				"          source",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRows",
				"selectRows, countrySource lookup(selectRows@country == countrySource@country,",
				"     multiple: false,",
				"     pickup: 'any',",
				"     broadcast: 'auto')~> lookuphospitaladmissions",
				"lookuphospitaladmissions select(mapColumn(",
				"          country = selectRows@country,",
				"          indicator,",
				"          reported_date,",
				"          reported_year_week,",
				"          value,",
				"          source,",
				"          country = countrySource@country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectRequiredColumns",
				"selectRequiredColumns split(indicator == 'Weekly new hospital admissions per 100k' || indicator == 'Weekly new ICU admissions per 100k',",
				"     disjoint: false) ~> splitDailyToWeekly@(weekly, daily)",
				"sourceDimDate derive(ecdc_year_week = year + '-W' + lpad(week_of_year, 2, '0')) ~> DerivedecdcWeekYear",
				"DerivedecdcWeekYear aggregate(groupBy(ecdc_year_week),",
				"     week_start_date = min(date),",
				"          week_end_date = max(date)) ~> aggregateDimDate",
				"splitDailyToWeekly@weekly, aggregateDimDate join(reported_year_week == ecdc_year_week,",
				"     joinType:'inner',",
				"     matchType:'exact',",
				"     ignoreSpaces: false,",
				"     broadcast: 'auto')~> joinWithDate",
				"joinWithDate pivot(groupBy(country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          ecdc_year_week,",
				"          week_start_date,",
				"          week_end_date),",
				"     pivotBy(indicator, ['Weekly new hospital admissions per 100k', 'Weekly new ICU admissions per 100k']),",
				"     {} = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotWeekly",
				"splitDailyToWeekly@daily pivot(groupBy(country,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population),",
				"     pivotBy(indicator, ['Daily hospital occupancy', 'Daily ICU occupancy']),",
				"     {} = sum(value),",
				"     columnNaming: '$V$N',",
				"     lateral: true) ~> pivotDaily",
				"pivotWeekly sort(desc(reported_year_week, true),",
				"     asc(country, true)) ~> sortWeekly",
				"pivotDaily sort(desc(reported_date, true),",
				"     asc(country, true)) ~> sortDaily",
				"sortWeekly select(mapColumn(",
				"          country,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          source,",
				"          reported_date,",
				"          reported_year_week,",
				"          ecdc_year_week,",
				"          reported_week_start_date = week_start_date,",
				"          reported_week_end_date = week_end_date,",
				"          {Weekly new hospital admissions per 100k},",
				"          {Weekly new ICU admissions per 100k}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectWeekly",
				"sortDaily select(mapColumn(",
				"          country,",
				"          reported_date,",
				"          reported_year_week,",
				"          source,",
				"          country_code_2_digit,",
				"          country_code_3_digit,",
				"          population,",
				"          { hospital occupancy count} = {Daily hospital occupancy},",
				"          { ICU occupancy count} = {Daily ICU occupancy}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> selectDaily",
				"selectWeekly sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> weeklySink",
				"selectDaily sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     umask: 0022,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> DailySink"
			]
		}
	}
}